import axios from "axios";
import { Client,Intents, TextChannel } from "discord.js";
import { SlashCommandBuilder } from "@discordjs/builders";
import { REST } from "@discordjs/rest";
import { Routes } from "discord-api-types/v9";
import { botDatabase } from "./database";
import * as dotenv from "dotenv";
dotenv.config();

const commands = [
    new SlashCommandBuilder().setName("changemode").setDescription("Change Enforcing/Permissive"),
    new SlashCommandBuilder().setName("changetimeout").setDescription("Change Timeout Times(if the time is zero, this bot doesn't timeout)").addNumberOption(opt => opt.setName("timeouttime").setDescription("Timeout length(minute)").setRequired(true)),
    new SlashCommandBuilder().setName("status").setDescription("Show status")
];
const db = new botDatabase();
db.initDataBase();
const client = new Client({intents:[Intents.FLAGS.GUILDS,Intents.FLAGS.DIRECT_MESSAGES,Intents.FLAGS.GUILD_MESSAGES]});
const rest = new REST({ version: '9' }).setToken(process.env.DISCORD_TOKEN as string);

client.on("ready",(bot) => {
    console.log("ready");
    setTimeout(() => {
        bot.user.setActivity(`${client.ws.ping}ms | Node.js ${process.version}`, { type:"WATCHING" });
    },5000);
});
setInterval(() => {
    client.user?.setActivity(`${client.ws.ping}ms | Node.js ${process.version}`, { type:"WATCHING" });
},600000)

client.on("guildCreate",guild => {
    rest.put(Routes.applicationGuildCommands(process.env.DISCORD_ID as string, guild.id.toString()), {body:commands})
        .then(() => void 0)
        .catch(error => console.log(error));
});

client.on("messageCreate",async msg => {
    if(!msg.guild?.me?.permissions.has("MODERATE_MEMBERS")) return;
    // https://qiita.com/nagimaruxxx/items/c2f186a2df5e32233122
    const urlRegxp:RegExp = /https?:\/\/[-_.!~*\'()a-zA-Z0-9;\/?:\@&=+\$,%#\u3000-\u30FE\u4E00-\u9FA0\uFF01-\uFFE3]+/g
    if(msg.content.match(urlRegxp)){
        const urlArray = urlRegxp.exec(msg.content) as RegExpExecArray;
        let urls:{url:string}[] = [];
        for (let i of urlArray) {
            urls.push({url:i});
        }
        const post = await axios.post(`https://safebrowsing.googleapis.com/v4/threatMatches:find?key=${process.env.GOOGLEAPI_KEY}`, {
            client: {
                clientId: "DiscordAntiMalwareBot",
                clientVersion: "1.0.0"
            },
            threatInfo: {
                threatTypes: ["MALWARE","SOCIAL_ENGINEERING","POTENTIALLY_HARMFUL_APPLICATION","UNWANTED_SOFTWARE"],
                platformTypes: ["ANY_PLATFORM"],
                threatEntryTypes: ["URL"],
                threatEntries: urls
            }
        });
        const res = post.data;
        console.log(res);
        if(Object.keys(res).length === 0) {
            return;
        } else {
            if(msg.guild?.me?.permissions.has("MODERATE_MEMBERS")) {
                if(msg.guild.me.permissions.has("MANAGE_MESSAGES")) msg.delete();
                try {((await db.getMode()) && (await db.getTimeoutTime()) !== 0 && (await db.getTimeoutTime()) < 0) ? (msg.member?.timeout(1000 * 60 * (await db.getTimeoutTime()),"Detected malware links(by Google Safe Browsing)")) : void 0} catch(e) {console.error(e)}
                (client.channels.cache.get(process.env.CHANNEL_ID as string) as TextChannel).send({embeds: [{
                    color:222222,
                    title:"Detected Result",
                    fields: [
                        {
                            name:"User",
                            value:`${msg.author.tag}`
                        },
                        {
                            name:"Message",
                            value:"```" + msg.content + "```"
                        },
                        {
                            name:"Google Safe Browsing Logs",
                            value:"```\n" + JSON.stringify(res) + "\n```"
                        },
                        {
                            name:"WARNING",
                            value:"**This logs include dangerous URLs.\nPlease don't touch them.**"
                        }
                    ]
                }]});
                if((await db.getMode()) && msg.guild.me.permissions.has("MODERATE_MEMBERS")) {
                    const embeds = await msg.channel.send({embeds: [{
                        color:222222,
                        title:"Timeout Result",
                        fields: [
                            {
                                name:"User",
                                value:`${msg.author.tag}`
                            },
                            {
                                name:"Reason",
                                value:"Detected dangerous URLs."
                            },
                            {
                                name:"Timeout length",
                                value:`${(await db.getTimeoutTime())}min`
                            }
                        ]
                    }]});
                    setTimeout(() => {
                        embeds.delete();
                    },1000 * 10)
                }
            } else return;
        }
    }
});

client.on("interactionCreate",async inter => {
    if(!inter.guild?.me?.permissions.has("MODERATE_MEMBERS")) return;
    if(!inter.isCommand()) return;
    if(!inter.memberPermissions?.has("MODERATE_MEMBERS")) return;
    const guild = await client.guilds.fetch(process.env.GUILD_ID as string);
    const user = await guild.members.fetch(inter.member?.user.id as string);
    if(inter.commandName === "status") {
        inter.reply("Pleaaes wait...");
        inter.channel?.send({embeds:[{
            color:222222,
            title:"Status",
            fields: [
                {
                    name:"Mode",
                    value:(await db.getMode() ? "Enforcing(Timeout is enabled)" : "Permissive(Timeout is disabled)")
                },
                {
                    name:"Timeout length",
                    value:`${(await db.getTimeoutTime())}min`
                }
            ]
        }]});
    }
    if(inter.commandName === "changemode"){
        inter.reply("Please wait...");
        (await db.getMode()) ? (await db.changeMode()) : (await db.changeMode());
        (await client.channels.fetch(inter.channelId) as TextChannel).send({embeds: [{
            color:222222,
            title:"Setting Result",
            fields: [
                {
                    name:"Mode",
                    value:((await db.getMode() ? "Changed to Enforcing" : "Changed to Permissive"))
                },
                {
                    name: "Runner",
                    value:inter.user.tag
                }
            ]
        }]});
    }
    if(inter.commandName === "changetimeout") {
        inter.reply("Please wait...")
        if(!user.roles.cache.has(process.env.ROLE_ID as string)) {
            inter.reply("You don't have the permission to run this command!");
        } else await db.changeTimeoutTime(inter.options.getNumber("timeouttime") as number);
        (await client.channels.fetch(inter.channelId) as TextChannel).send({embeds: [{
            color:222222,
            title:"Setting Result",
            fields: [
                {
                    name:"Timeout length",
                    value:`Changed to ${(await db.getTimeoutTime())}min`
                },
                {
                    name: "Runner",
                    value:inter.user.tag
                }
            ]
        }]});
    }
});
client.login(process.env.DISCORD_TOKEN);
