import * as firebase from "firebase-admin";
import { getFirestore } from "firebase-admin/firestore";
import * as dotenv from "dotenv";
dotenv.config();

interface modeDoc {
    isEnforcing:boolean
};
interface timeoutDoc {
    time:number
};
firebase.initializeApp({
    credential: firebase.credential.cert({
        projectId: process.env.FIREBASE_ID,
        clientEmail: process.env.FIREBASE_CLIENT,
        privateKey: process.env.FIREBASE_KEY?.replace(/\\n/g, '\n')
    })
});
export const db = getFirestore();

export class botDatabase {
    constructor(){}
    private async returnDocData<T>(status:"mode" | "timeout"):Promise<{list:firebase.firestore.DocumentSnapshot<T>,data:firebase.firestore.DocumentReference<T>}> {
        if(status === "mode") {
            const Data = db.collection("status").doc("mode") as unknown as firebase.firestore.DocumentReference<T>;
            const DataList = await Data.get();
            return {list:DataList,data:Data};
        } else {
            const Data = db.collection("status").doc("timeoutTime") as unknown as firebase.firestore.DocumentReference<T>;
            const DataList = await Data.get();
            return {list:DataList,data:Data};
        }
    }
    async initDataBase():Promise<void> {
        const modeData_unInit = await this.returnDocData<modeDoc>("mode");
        const modeData = modeData_unInit.data;
        const modeDataList = modeData_unInit.list;
        if(modeDataList.exists){
            return;
        } else {
            modeData.set({isEnforcing:true});
        }
        const timeoutData_uninit = await this.returnDocData<timeoutDoc>("timeout");
        const timeoutData = timeoutData_uninit.data;
        const timeoutDataList = timeoutData_uninit.list;
        if(timeoutDataList.exists) {
            return;
        } else {
            timeoutData.set({time:1});
        }
    }
    async getMode():Promise<boolean> {
        const data_uninit = await this.returnDocData<modeDoc>("mode");
        const Data = data_uninit.data;
        const list = data_uninit.list;
        return list.data()?.isEnforcing as boolean;
    }
    async changeMode():Promise<void> {
        const data_uninit = await this.returnDocData<modeDoc>("mode");
        const Data = data_uninit.data;
        const list = data_uninit.list;
        await Data.update({isEnforcing:(list.data()?.isEnforcing ? false : true)});
    }
    async getTimeoutTime():Promise<number> {
        const data_uninit = await this.returnDocData<timeoutDoc>("timeout");
        const Data = data_uninit.data;
        const list = data_uninit.list;
        return list.data()?.time as number;
    }
    async changeTimeoutTime(num:number):Promise<void> {
        const data_uninit = await this.returnDocData<timeoutDoc>("timeout");
        const Data = data_uninit.data;
        const list = data_uninit.list;
        await Data.update({time:num});
    }
}